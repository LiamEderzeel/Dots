#!/usr/bin/env bash

function usage {
  echo "Project Launcher"
  echo ""
  echo "Launch tmux session at your project directory or attach/switch to an existing session"
  echo "Supports fuzzy search power by fzf in multiple project directories"
  echo ""
  echo "Usage: $(basename $0) [-d <arg>...] [--] [DIRECTORY...]" 2>&1
  echo ""
  echo "projectPaths:"
  echo '   -d           add directory for fuzzy search'
  echo '   -h|--help    show usage'
  exit 1
}

optstring=":hd:-:"
while getopts ${optstring} arg; do
  case ${arg} in
    -)
      case "${OPTARG}" in
        help)
            usage
            ;;
        *)
            if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                echo "Invalid option --${OPTARG}" >&2
            fi
            ;;
      esac;;
    h)
      usage
      ;;
    d)
      multi+=("$OPTARG")
      ;;
    ?)
      echo "Invalid option: -${OPTARG}."
      exit 2
      ;;
  esac
done
shift $(expr $OPTIND - 1 )

function contains () {
  local value=$1
  shift
  local elements=("$@")

  for el in ${elements[@]}; do
    if [[ "${el}" = "${value}" ]]; then
      return 0
    fi
  done

  return 1
}

function indexOf () {
  local value=$1
  shift
  local elements=("$@")

  for i in "${!elements[@]}"; do
    if [[ "${elements[$i]}" = "${value}" ]]; then
      echo "${i}";
      break;
    fi
  done
}

if [[ $# -eq 1 ]]; then
    selectedProjectName=$1
else
  projectPaths=($(find ${multi[@]} -mindepth 1 -maxdepth 1 -type d))

    attachedSessionName=$(tmux display-message -p \#S)
    sessions=$(tmux list-session -F \#S)
    projectDisplayNames=()
    projectNames=()

    for key in ${projectPaths[@]}; do
      value=$(basename "$(dirname "${key}")")"/"$(basename "${key}")
        projectNames+=($value)
      if [[ $value == $attachedSessionName ]]; then 
        projectDisplayNames+=("[33m$value[0m")
      elif $(contains ${value} ${sessions[@]}); then 
        projectDisplayNames+=("[34m$value[0m")
      else
        projectDisplayNames+=($value)
      fi
    done

    selectedProjectName=$(printf "%s\n" "${projectDisplayNames[@]}" | fzf --ansi)

    index=$(indexOf ${selectedProjectName} ${projectNames[@]})
    selectedPath="${projectPaths[$index]}"
fi

if [[ -z $selectedProjectName ]]; then
    exit 0
fi

if ! $(contains ${selectedProjectName} ${sessions[@]} ); then
  tmux new-session -ds $selectedProjectName -c $selectedPath
fi

if ! [[ -z $TMUX ]]; then
  tmux switch-client -t $selectedProjectName
else
  tmux attach-session -t=$selectedProjectName
fi
